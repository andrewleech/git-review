name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

# Required permissions for creating releases
permissions:
  contents: write  # Required for creating releases and uploading assets
  actions: read    # Required for downloading artifacts

env:
  # Minimum Rust version we support
  MIN_RUST_VERSION: "1.74.0"

jobs:
  test:
    name: Test Rust ${{ matrix.rust-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust-version: ["stable", "beta", "1.74.0"]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy

    - name: Set up git (for tests)
      run: |
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Lint with clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose

    - name: Run documentation tests
      run: cargo test --doc

    - name: Check cargo build
      run: cargo build --release --verbose

  security:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Cache audit database
      uses: actions/cache@v4
      with:
        path: ~/.cargo/advisory-db
        key: rust-advisory-db

    - name: Run security audit
      run: |
        cargo install --locked cargo-audit
        cargo audit

  build:
    name: Build release binaries
    runs-on: ${{ matrix.os }}
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: git-review
            asset_name: git-review-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: git-review.exe
            asset_name: git-review-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: git-review
            asset_name: git-review-macos-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Rename binary
      shell: bash
      run: |
        mkdir -p releases
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} releases/${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} releases/${{ matrix.asset_name }}
          chmod +x releases/${{ matrix.asset_name }}
        fi

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: releases/${{ matrix.asset_name }}

  release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/**/git-review-*
        generate_release_notes: true
        draft: false
        prerelease: false

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, security]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Verify tag matches Cargo.toml version
      run: |
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Cargo.toml version: $CARGO_VERSION"
        echo "Git tag version: $TAG_VERSION"
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch! Cargo.toml has $CARGO_VERSION but tag is v$TAG_VERSION"
          exit 1
        fi
        echo "✅ Version validation passed"

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  test-install:
    name: Test cargo install
    runs-on: ${{ matrix.os }}
    needs: publish-crates
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Test install from crates.io
      run: |
        cargo install git-review
        git-review --version
